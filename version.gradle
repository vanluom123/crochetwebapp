class ApplicationVersion {
    Integer major
    Integer minor
    Integer patch
    Boolean release

    ApplicationVersion(Integer major, Integer minor, Integer patch, Boolean release) {
        this.major = major
        this.minor = minor
        this.patch = patch
        this.release = release
    }

    private String getRelease() {
        return this.release ? '' : '-SNAPSHOT'
    }

    String getVersion() {

        return "$major.$minor.$patch" + this.getRelease()
    }
}


ext.loadVersion = { ->

    def versionPropertiesFile = file('version.properties')

    if (!versionPropertiesFile.exists()) {
        throw new Exception('No version.properties file found')
    }

    Properties versionProperties = new Properties()

    versionPropertiesFile.withInputStream { stream ->
        versionProperties.load(stream)
    }
    return new ApplicationVersion(versionProperties.major.toInteger(),
            versionProperties.minor.toInteger(),
            versionProperties.patch.toInteger(),
            versionProperties.release.toBoolean())

}

tasks.register('majorVersionUpdate') {
    group = 'versioning'
    description = 'Bump to next major version'

    dependsOn(minorVersionUpdate)

    doLast {
        def versionFile = file('version.properties')
        ant.propertyfile(file: versionFile) {
            if (versionFile.canRead()) {
                def versionProperties = new Properties()
                versionProperties.load(new FileInputStream(versionFile))
                def minor = versionProperties.minor.toInteger()
                if (minor >= 20) {
                    println "Minor version is greater than 20, bumping major version"
                    entry(key: 'major', type: 'int', operation: '+', value: 1)
                    entry(key: 'minor', type: 'int', operation: '=', value: 0)
                    entry(key: 'patch', type: 'int', operation: '=', value: 0)
                }
            }
        }
    }
}
tasks.register('minorVersionUpdate') {
    group = 'versioning'
    description = 'Bump to next minor version'

    dependsOn(patchVersionUpdate)

    doLast {
        def versionFile = file('version.properties')
        ant.propertyfile(file: versionFile) {
            if (versionFile.canRead()) {
                def versionProperties = new Properties()
                versionProperties.load(new FileInputStream(versionFile))
                def patch = versionProperties.patch.toInteger()
                if (patch >= 20) {
                    println "Patch version is greater than 20, bumping minor version"
                    entry(key: 'minor', type: 'int', operation: '+', value: 1)
                    entry(key: 'patch', type: 'int', operation: '=', value: 0)
                }
            }
        }
    }
}
tasks.register('patchVersionUpdate') {
    group = 'versioning'
    description = 'Bump to next patch version'
    doFirst {
        def versionFile = file('version.properties')
        ant.propertyfile(file: versionFile) {
            entry(key: 'patch', type: 'int', operation: '+', value: 1)
        }
    }
}
tasks.register('releaseVersion') {
    group = 'versioning'
    description = 'Make the version a release'
    doFirst {
        def versionFile = file('version.properties')
        ant.propertyfile(file: versionFile) {
            entry(key: 'release', type: 'string', operation: '=', value: 'true')
        }
    }
}
tasks.register('preReleaseVersion') {
    group = 'versioning'
    description = 'Make the version a pre release'
    doFirst {
        def versionFile = file('version.properties')
        ant.propertyfile(file: versionFile) {
            entry(key: 'release', type: 'string', operation: '=', value: 'false')
        }
    }
}